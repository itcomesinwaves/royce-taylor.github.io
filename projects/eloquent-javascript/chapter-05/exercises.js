// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

//const { countBy, characterScript } = require("./helpers");

function flatten(arrays) {
  let returneroo = arrays.reduce(function(accum, current){
     return accum.concat(current); 


  }, []); 
return returneroo;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  if (test(value)) {
    body(value)
    return loop(update(value), test, update, body);
  } else {
    return value; 
  }
   

}
// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  for (var i = 0; i < array.length; i++) {
    if (!test(array[i])) {
      return false;
    }

    
  }
  return true; 
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(str) {
 const arr = countBy(str, function(char){
  // get the unicode value for the current char
    const unicode = char.charCodeAt(); 
    // find the script obj from the unicode char
    const script = characterScript(unicode);
    // returning the name of the script direction or null
    if (script !== null) {
      return script.direction; 
    } else {
      return null; 
    }

  });
// find the highest count by sorting
arr.sort(function(a, b){
  return b.count - a.count
});
  return arr[0].name; 
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
